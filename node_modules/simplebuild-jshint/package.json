{
  "name": "simplebuild-jshint",
  "version": "0.3.0",
  "engines": {
    "node": ">=0.10"
  },
  "description": "A simple library for automating JSHint",
  "main": "src/index.js",
  "scripts": {
    "test": "jake"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jamesshore/simplebuild-jshint"
  },
  "keywords": [
    "simplebuild",
    "jshint",
    "lint"
  ],
  "author": {
    "name": "James Shore"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jamesshore/simplebuild-jshint/issues"
  },
  "homepage": "https://github.com/jamesshore/simplebuild-jshint",
  "devDependencies": {
    "jake": "~0.7.6",
    "mocha": "~1.16.2",
    "expect.js": "~0.2.0",
    "jshint": "^2.4.4"
  },
  "dependencies": {
    "simplebuild": "~0.2.0"
  },
  "peerDependencies": {
    "jshint": "*"
  },
  "readme": "# Simplebuild-JSHint\n\nA simple library for automating JSHint.\n\n[JSHint](http://www.jshint.com/) is a static analysis (\"lint\") tool for JavaScript. It analyzes JavaScript source code for common mistakes. This library provides a simple interface to JSHint that's convenient to use with task automation tools such as [Grunt](http://gruntjs.com/) or [Jake](https://github.com/mde/jake).\n\n\n## Installation\n\nThis is a Node.js library. Install Node, then:\n\n`npm install simplebuild-jshint` (add `--save` or `--save-dev` if you want)\n\nNote that this library uses your existing JSHint installation. (JSHint will be installed if needed.)\n\n\n## Usage\n\nThis library provides these functions:\n\n* `checkFiles`: Run JSHint against a list of files.\n* `checkOneFile`: Run JSHint against a single file (it's useful for auto-generated build dependencies).\n* `checkCode`: Run JSHint against raw source code.\n\n### `checkFiles(options, success, failure)`\n\nRun JSHint against a list of files. A dot will be written to stdout for each file processed. Any errors will be written to stdout.\n\n* `options`: an object containing the following properties:\n    * `files`: a string or array containing the files to check. Globs (`*`) and globstars (`**`) will be expanded to match files and directory trees respectively. Prepend `!` to exclude files.\n    * `options` (optional): JSHint options (see [the JSHint documentation](http://www.jshint.com/docs/options/).\n    * `globals` (optional): Permitted global variables (for use with the `undef` option). Each variable should be set to `true` or `false`. If false, the variable is considered read-only.\n\n* `success()`: a function to call if the code validates successfully.\n\n* `failure(message)`: a function to call if the code does not validate successfully. A simple error message is provided in the `message` parameter, but detailed error messages are written to stdout.\n\n### `checkOneFile(options, success, failure)`\n\nRun JSHint against a single file (it's useful for auto-generated build dependencies).\n\n* `options`: an object containing the following properties:\n    * `file`: a string containing the path to the file to check.\n    * `options` (optional): JSHint options (see [the JSHint documentation](http://www.jshint.com/docs/options/).\n    * `globals` (optional): Permitted global variables (for use with the `undef` option). Each variable should be set to `true` or `false`. If false, the variable is considered read-only.\n\n* `success()`: a function to call if the code validates successfully.\n\n* `failure(message)`: a function to call if the code does not validate successfully. A simple error message is provided in the `message` parameter, but detailed error messages are written to stdout.\n\n### `checkCode(options, success, failure)`\n\nRun JSHint against raw source code. Any errors will be written to stdout.\n\n* `options`: an object containing the following properties:\n    * `code`: a string containing the source code to check.\n    * `options` (optional): JSHint options (see [the JSHint documentation](http://www.jshint.com/docs/options/).\n    * `globals` (optional): Permitted global variables (for use with the `undef` option). Each variable should be set to `true` or `false`. If false, the variable is considered read-only.\n\n* `success()` a function to call if the code validates successfully.\n\n* `failure(message)` a function to call if the code does not validate successfully. A simple error message is provided in the `message` parameter, but detailed error messages are output to stdout.\n\n\n## Examples\n\nThis library is designed to be easy to integrate with any task automation tool:\n\n### Grunt\n\n```javascript\nvar jshint = require(\"simplebuild-jshint\");\n\nmodule.exports = function(grunt) {\n    grunt.initConfig({\n        jshint: {\n            files: [ \"*.js\", \"src/**/*.js\", \"test/**/*.js\" ],\n            options: {\n                bitwise: true,\n                curly: false,\n                eqeqeq: true\n                // etc\n            }\n        }\n    });\n\n    grunt.registerTask(\"lint\", \"Lint everything\", function() {\n        jshint.checkFiles(grunt.config(\"jshint\"), this.async(), grunt.warn);\n    });\n\n    grunt.registerTask(\"default\", [ \"lint\" ]);\n};\n```\n\n### Jake\n\n```javascript\nvar jshint = require(\"simplebuild-jshint\");\n\ntask(\"default\", [ \"lint\" ]);\n\ntask(\"lint\", function() {\n    jshint.checkFiles({\n        files: [ \"*.js\", \"src/**/*.js\", \"test/**/*.js\" ],\n        options: {\n            bitwise: true,\n            curly: false,\n            eqeqeq: true\n            // etc\n        }\n    }, complete, fail);\n}, { async: true });\n```\n\n### Plain JavaScript\n\n```javascript\nvar jshint = require(\"simplebuild-jshint\");\n\njshint.checkFiles({\n    files: [ \"*.js\", \"src/**/*.js\", \"test/**/*.js\" ],\n    options: {\n        bitwise: true,\n        curly: false,\n        eqeqeq: true\n        // etc\n    }\n}, function() {\n    console.log(\"OK\");\n}, function(message) {\n    console.log(message);\n});\n```\n\n## About Simplebuild\n\nThis library is a simplebuild module. In addition to being used as a standalone library (as described above), it can also be used with simplebuild extensions and mappers. For more information about simplebuild, see [the Simplebuild GitHub page](https://github.com/jamesshore/simplebuild).\n\n\n## Version History\n\n__0.3.0:__ Added `jshint` as a peer dependency. It no longer needs to be installed separately.\n\n__0.2.0:__ `checkOneFile()`.\n\n__0.1.1:__ Corrected documentation error: options.globals is not actually a JSHint option.\n\n__0.1.0:__ `checkSource()` and `checkFiles()`.\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2012-2014 James Shore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "_id": "simplebuild-jshint@0.3.0",
  "_from": "simplebuild-jshint@^0.3.0"
}
